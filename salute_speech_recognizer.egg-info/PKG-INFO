Metadata-Version: 2.4
Name: salute-speech-recognizer
Version: 1.0.0
Summary: CLI для транскрибации аудио через Салют Спич (gRPC) с hints, speaker mapping и Markdown-рендером
Author: Project Authors
License: Unlicense
Keywords: speech,recognition,grpc,salute,sber
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Environment :: Console
Classifier: Topic :: Multimedia :: Sound/Audio :: Speech
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: grpcio>=1.62.2
Provides-Extra: dev
Requires-Dist: pytest>=8.2.0; extra == "dev"
Requires-Dist: pytest-cov>=5.0.0; extra == "dev"
Requires-Dist: black>=24.8.0; extra == "dev"
Requires-Dist: isort>=5.13.2; extra == "dev"
Requires-Dist: flake8>=7.1.1; extra == "dev"
Requires-Dist: mypy>=1.11.2; extra == "dev"
Requires-Dist: pre-commit>=3.8.0; extra == "dev"
Dynamic: license-file

# Salute Speech Recognizer (v1.0.0)

CLI-инструмент для транскрибации аудио через Салют Спич (gRPC) с поддержкой hints, маппинга спикеров и Markdown-вывода.

## Быстрый старт

- Установите зависимости (рекомендуется venv Python 3.12):
```bash
pip install -e .[dev]
```

- Укажите ключ доступа:
```bash
export SBER_SPEECH_AUTH_KEY="<ваш ключ>"
```

- Положите аудио в `Source/audio.mp3` (короткий тестовый файл уже используется в проекте).

- Запустите распознавание (gRPC):
```bash
venv/bin/python ss_recognize.py --input Source/audio.mp3 --api grpc
```
Результат:
- Markdown: `Result/audio.md`
- Сырый JSON: `Result/audio.grpc.raw.json`
- Нормализованный JSON: `Result/audio.grpc.norm.json`

## Примеры команд

- Одиночный файл с кастомными конфигами:
```bash
venv/bin/python ss_recognize.py \
  --input Source/my_record.wav \
  --api grpc \
  --language ru-RU \
  --hints Source/hints.txt \
  --speakers-map Source/speakers_map.json
```

- Пакетная обработка нескольких файлов (bash):
```bash
for f in Source/*.mp3; do \
  out="Result/$(basename "${f%.*}").md"; \
  venv/bin/python ss_recognize.py --input "$f" --output "$out" --api grpc \
    --hints Source/hints.txt --speakers-map Source/speakers_map.json; \
done
```

- Пакетная обработка со смешанными форматами:
```bash
for f in Source/*.{mp3,wav,ogg,opus,flac}; do \
  [ -e "$f" ] || continue; \
  out="Result/$(basename "${f%.*}").md"; \
  venv/bin/python ss_recognize.py --input "$f" --output "$out" --api grpc; \
done
```

## Настройка качества

- Hints (`Source/hints.txt`): по одному слову/фразе на строку. Помогают модели распознавать термины/имена.
- SpeakerMap (`Source/speakers_map.json`): фраза → имя спикера. Поддерживает `re:` (регулярные выражения). Имена распространяются на все сегменты с тем же `speaker_id`.
- Гипотезы: используется `hypotheses_count=3`, n-best выбирается по покрытию hints.
- Таймауты (eou/no_speech/max_speech) настроены для стабильной сегментации.

Подробнее см. `USAGE.md` и `CONFIG.md`.

## Тесты

- Юнит:
```bash
pytest -q
```
- Интеграция (реальный вызов gRPC):
```bash
pytest -q -m integration
```
Требуется `SBER_SPEECH_AUTH_KEY` в окружении. 

## Лицензия

Unlicense. См. `LICENSE`.
